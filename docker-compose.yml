services:
  # フロントエンド（nginx + 静的ファイル配信）
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      TZ: Asia/Tokyo
    volumes:
      - ./ssl:/etc/nginx/ssl:ro  # SSL 証明書用（オプション）
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - skytree_photo_planner_network

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"  # メンテナンス用外部アクセス対応
    environment:
      POSTGRES_DB: ${DB_NAME:-skytree_photo_planner}
      POSTGRES_USER: ${DB_USER:-skytree_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      TZ: Asia/Tokyo
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-skytree_user} -d ${DB_NAME:-skytree_photo_planner}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - skytree_photo_planner_network

  # Redis (キューシステム用・内部アクセスのみ)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    expose:
      - "6379"  # 内部アクセスのみ（セキュリティ強化）
    environment:
      TZ: Asia/Tokyo
    volumes:
      - ./data/redis:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy noeviction
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - skytree_photo_planner_network

  # バックエンド API（ワーカー機能なし）
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: api
    restart: unless-stopped
    expose:
      - "${PORT:-3000}"
    # リソース制限でパフォーマンス安定化
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3000}
      # PostgreSQL 接続設定（Prisma 対応）
      DATABASE_URL: postgresql://${DB_USER:-skytree_user}:${DB_PASSWORD:-password_change_me}@postgres:5432/${DB_NAME:-skytree_photo_planner}
      # Redis 設定
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # JWT 設定
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production-256bit-secure-key-2025}
      REFRESH_SECRET: ${REFRESH_SECRET:-your-super-secret-refresh-key-change-this-in-production-256bit-secure-key-2025}
      # ログ設定
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_FILE_LOGGING: ${ENABLE_FILE_LOGGING:-true}
      LOG_DIR: /app/logs
      # フロントエンド設定
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
      # タイムゾーン
      TZ: Asia/Tokyo
      # ワーカー設定（バックエンドでも低負荷モード）
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-1}
      # バックエンドでバックグラウンドジョブスケジューラーを有効化
      ENABLE_BACKGROUND_SCHEDULER: true
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - skytree_photo_planner_network

  # ワーカー（バックグラウンドジョブ処理専用）
  worker:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: worker
    restart: unless-stopped
    # Dockerfile でワーカー起動コマンドを指定済み
    # ワーカー用リソース制限（より少なく）
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    environment:
      NODE_ENV: production
      # PostgreSQL 接続設定（Prisma 対応）
      DATABASE_URL: postgresql://${DB_USER:-skytree_user}:${DB_PASSWORD:-password_change_me}@postgres:5432/${DB_NAME:-skytree_photo_planner}
      # Redis 設定
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # JWT 設定
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production-256bit-secure-key-2025}
      REFRESH_SECRET: ${REFRESH_SECRET:-your-super-secret-refresh-key-change-this-in-production-256bit-secure-key-2025}
      # ログ設定
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_FILE_LOGGING: ${ENABLE_FILE_LOGGING:-true}
      LOG_DIR: /app/logs
      # タイムゾーン
      TZ: Asia/Tokyo
      # ワーカー設定（低負荷モード）
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-1}
      # ワーカーでは定期ジョブ無効（重複実行防止）
      ENABLE_BACKGROUND_SCHEDULER: false
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pgrep", "-f", "worker"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - skytree_photo_planner_network


volumes: {}

networks:
  skytree_photo_planner_network:
    driver: bridge
